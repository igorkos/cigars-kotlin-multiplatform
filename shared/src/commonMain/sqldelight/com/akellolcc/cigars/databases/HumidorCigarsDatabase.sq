
CREATE TABLE CigarHumidorTable (
    count INTEGER NOT NULL,
    humidorId INTEGER NOT NULL,
    cigarId INTEGER  NOT NULL,
    PRIMARY KEY (humidorId, cigarId),
    FOREIGN KEY (humidorId) REFERENCES HumidorsTable(rowid),
    FOREIGN KEY (cigarId) REFERENCES CigarsTable(rowid)
);


get:
SELECT CigarHumidorTable.* FROM CigarHumidorTable WHERE humidorId = :humidorId AND cigarId = :cigarId;

all:
SELECT * FROM CigarHumidorTable;


add:
INSERT INTO CigarHumidorTable (count, humidorId, cigarId)
VALUES (?, ?, ?);

update:
UPDATE CigarHumidorTable SET count = :count WHERE humidorId = :humidorId AND cigarId = :cigarId;

remove:
DELETE FROM CigarHumidorTable WHERE humidorId = :humidorId AND cigarId = :cigarId;

removeAll:
DELETE FROM CigarHumidorTable;

find:
SELECT * FROM CigarHumidorTable WHERE humidorId = :rowid AND cigarId = :cigarId;

count:
SELECT COUNT(*) FROM CigarHumidorTable;

humidorsCount:
SELECT COUNT(*) FROM CigarHumidorTable WHERE cigarId=:id;

cigarsCount:
SELECT COUNT(*) FROM CigarHumidorTable WHERE humidorId=:id;

contains:
SELECT count(1) FROM CigarHumidorTable WHERE humidorId = :rowid AND cigarId = :cigarId;

lastInsertRowId:
SELECT last_insert_rowid();

cigarHumidors:
SELECT CigarHumidorTable.*  FROM CigarHumidorTable
INNER JOIN HumidorsTable ON CigarHumidorTable.humidorId = HumidorsTable.rowid
    WHERE
        CigarHumidorTable.cigarId = :cigarId AND
        name LIKE :name AND
        brand LIKE :brand
     ORDER BY CASE
        WHEN :sort = 'name' THEN name
        WHEN :sort = 'brand' THEN brand
        WHEN :sort = 'count' THEN CigarHumidorTable.count
        ELSE NULL
    END ASC;

pagedCigarHumidors:
    SELECT CigarHumidorTable.*  FROM CigarHumidorTable
    INNER JOIN HumidorsTable ON CigarHumidorTable.humidorId = HumidorsTable.rowid
        WHERE
            CigarHumidorTable.cigarId = :cigarId AND
            name LIKE :name AND
            brand LIKE :brand
         ORDER BY CASE
            WHEN :sort = 'name' THEN name
            WHEN :sort = 'brand' THEN brand
            WHEN :sort = 'count' THEN CigarHumidorTable.count
            ELSE NULL
        END ASC
    LIMIT :limit OFFSET :offset;


humidorCigars:
SELECT CigarHumidorTable.* FROM CigarHumidorTable
    INNER JOIN CigarsTable ON CigarHumidorTable.cigarId = CigarsTable.rowid
    WHERE
        CigarHumidorTable.humidorId = :humidorId AND
        name LIKE :name AND
        brand LIKE :brand AND
        country LIKE :country AND
        date >= :date AND
        cigar LIKE :cigar AND
        gauge >= :gauge AND
        length >= :length AND
        strength >= :strength
     ORDER BY CASE
        WHEN :sort = 'name' THEN name
        WHEN :sort = 'brand' THEN brand
        WHEN :sort = 'country' THEN country
        WHEN :sort = 'date' THEN date
        WHEN :sort = 'cigar' THEN cigar
        WHEN :sort = 'gauge' THEN gauge
        WHEN :sort = 'length' THEN length
        WHEN :sort = 'strength' THEN strength
        WHEN :sort = 'rating' THEN rating
        WHEN :sort = 'myrating' THEN myrating
        ELSE NULL
    END ASC;

pagedHumidorCigars:
    SELECT CigarHumidorTable.* FROM CigarHumidorTable
    INNER JOIN CigarsTable ON CigarHumidorTable.cigarId = CigarsTable.rowid
    WHERE
        CigarHumidorTable.humidorId = :humidorId AND
        name LIKE :name AND
        brand LIKE :brand AND
        country LIKE :country AND
        date >= :date AND
        cigar LIKE :cigar AND
        gauge >= :gauge AND
        length >= :length AND
        strength >= :strength
     ORDER BY CASE
        WHEN :sort = 'name' THEN name
        WHEN :sort = 'brand' THEN brand
        WHEN :sort = 'country' THEN country
        WHEN :sort = 'date' THEN date
        WHEN :sort = 'cigar' THEN cigar
        WHEN :sort = 'gauge' THEN gauge
        WHEN :sort = 'length' THEN length
        WHEN :sort = 'strength' THEN strength
        WHEN :sort = 'rating' THEN rating
        WHEN :sort = 'myrating' THEN myrating
        ELSE NULL
    END ASC
    LIMIT :limit OFFSET :offset;